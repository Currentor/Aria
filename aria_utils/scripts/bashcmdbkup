# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


export ROS_IP=`LANG=C ifconfig | grep -e "inet addr\:[0-9]" | grep -v "127.0.0.1" | sed "s/\:/\\n/g" | sed "s/\ /\\n/g" | grep -e "[0-9]" | head -1` ##192.168.97.99
export ROS_HOSTNAME=$ROS_IP
export ROS_MASTER_URI=http://$ROS_IP:11311

source /opt/ros/hydro/setup.bash
## source ~/ros/hydro/devel/setup.bash

export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:/home/leus/ros/hydro/src/currentor-aria:/home/leus/ros/hydro/src/kduino:/home/leus/ros/hydro/src/jsk-ros-pkg/jsk_recognition/jsk_pcl_ros:/home/leus/ros/hydro/src/jsk-ros-pkg/jsk_common:/home/leus/ros/hydro/src/jsk-ros-pkg/jsk_visualization:/opt/ros/hydro/share/rqt_reconfigure:/home/leus/ros/hydro/src/jsk-ros-pkg/jsk_control/eus_qp
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/leus/ros/hydro/devel/lib
export PYTHONPATH=/home/leus/ros/hydro/devel/lib/python2.7/dist-packages:$PYTHONPATH;
export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/home/leus/ros/hydro/devel
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/leus/ros/hydro/devel/lib/pkgconfig


function aria {
    if [ $1 = "echo" ] ; then
	if [ -z "$3" ] ; then
	    rostopic echo "/currentor_socket/sensor_array/"$2"/data"
	else
	    rostopic echo "/currentor_socket/sensor_array/"$2"/data"[$3]
	fi
    elif [ $1 = "once" ] ; then
	if [ -z "$3" ] ; then
	    rostopic echo -n1 "/currentor_socket/sensor_array/"$2"/data"
	else
	    rostopic echo -n1 "/currentor_socket/sensor_array/"$2"/data"[$3]
	fi	
    elif [ $1 = "pub" ] ; then
	if [ $2 = "gripper" ] ; then
	    rostopic pub --once "/2ndparty/request/gripper" std_msgs/Float32MultiArray '{data: ['$3','$4','$5']}'
	elif [ $2 = "eye" ] ; then
	    rostopic pub --once "/2ndparty/request/eye" std_msgs/Float32MultiArray '{data: ['$3','$4','$5']}'
	elif [ $2 = "feedback" ] ; then
	    mode=0
	    if [ $3 = "velocity" ] ; then
		mode=0
	    elif [ $3 = "torque" ] ; then
		mode=1
	    elif [ $3 = "position" ] ; then
		mode=2
	    elif [ $3 = "Kp" ] ; then
		mode=3
	    elif [ $3 = "Kd" ] ; then
		mode=4
	    elif [ $3 = "Ct" ] ; then
		mode=5
	    elif [ $3 = "Cp" ] ; then
		mode=6
	    else
		mode=0
	    fi
	    rostopic pub --once "/ros2http/socket_listener/json_string" std_msgs/String '{data: "{\"method\":\"setFeedback\",\"params\":\"['$mode']\",\"id\":\"0\"}"}'
	else
	    rostopic pub --once "/ros2http/socket_listener/json_string" std_msgs/String '{data: "{\"method\":\"'$2'\",\"params\":\"'$3'\",\"id\":\"0\"}"}'
	fi
    else
	rostopic pub --once "/aria/commandline" std_msgs/String $1
    fi
}

function ariacore {
    okay=0
    while [ $okay -lt 19 ]
    do
	aria pub sendZero
	sleep 3s
	okay=0
	for i in {1..20}
	do
	    pos=$(aria once voltage $i)
	    if [ "$(echo $pos)" == "1.0 ---" ]; then
		echo $i" "$pos
		okay=$((okay+1))
	    else
		echo -e "\e[1;31m$i missing\e[m"
		okay=$((okay+0))
	    fi
	done
    done
    aria apply_gain
    sleep 3s
    okay=0
    while [ $okay -lt 19 ]
    do
    	aria apply_gain
    	sleep 3s
    	okay=0
    	echo 'please make sure feedback is set to Kp! to proceed'
    	for i in {1..20}
    	do
    	    kp=$(aria once velocity $i)
    	    if [ "$(echo $kp)" == "0.0 ---" ]; then
		echo -e "\e[1;31m$i missing\e[m"
    		okay=$((okay+0))
    	    else
    		echo $i" "$kp
    		okay=$((okay+1))
    	    fi
    	done
    done
    okay=0
    while [ $okay -lt 19 ]
    do
	aria initiate
	sleep 5s
	okay=0
	for i in {1..20}
	do
	    mode=$(aria once voltage $i)
	    if [ "$(echo $mode)" == "2.0 ---" ]; then
		echo $i" "$mode
		okay=$((okay+1))
	    else
		echo -e "\e[1;31m$i missing\e[m"
		okay=$((okay+0))
	    fi
	done
    done
}